/**
 * üìÅ File : dataOps.js
 * üõ§Ô∏è  Path  : ~/developpement /snapshot/lib/dataOps.js
 * üìÖ Created at : 2025-04-02
 * üë§ Author  : William Balikel
 * ‚úçÔ∏è  Description : Mise en place d'un cache syst√®me pour la gestion des donn√©es avec AsyncStorage
 *     avec AsyncStorage (multi-√©cran support√©)
 *     permet de conserver les donn√©es entre les switche d'√©cran
 */


import AsyncStorage from '@react-native-async-storage/async-storage';

// ‚úÖ Enregistre des donn√©es dans le cache pour une cl√© donn√©e
export const saveData = async (key, data) => {
  try {
    const jsonValue = JSON.stringify(data);
    await AsyncStorage.setItem(key, jsonValue);
    console.log(`‚úÖ Donn√©es sauvegard√©es [${key}]`, data);
  } catch (e) {
    console.error(`‚ùå Erreur sauvegarde [${key}] :`, e);
  }
};

// ‚úÖ Charge les donn√©es d'une cl√© sp√©cifique
export const loadData = async (key) => {
  try {
    const jsonValue = await AsyncStorage.getItem(key);
    if (jsonValue !== null) {
      console.log(`üì¶ Donn√©es r√©cup√©r√©es [${key}]`, JSON.parse(jsonValue));
      return JSON.parse(jsonValue);
    } else {
      console.log(`üì≠ Aucun cache trouv√© pour [${key}]`);
      return null;
    }
  } catch (e) {
    console.error(`‚ùå Erreur lecture [${key}] :`, e);
  }
};

// ‚úÖ Supprime une entr√©e sp√©cifique
export const removeData = async (key) => {
  try {
    await AsyncStorage.removeItem(key);
    console.log(`üóëÔ∏è Cache supprim√© pour [${key}]`);
  } catch (e) {
    console.error(`‚ùå Erreur suppression [${key}] :`, e);
  }
};

// ‚ö†Ô∏è Efface tout le cache de l'app (utile uniquement en cas de reset complet)
export const clearAllData = async () => {
  try {
    await AsyncStorage.clear();
    console.log('üßπ Tous les caches ont √©t√© supprim√©s');
  } catch (e) {
    console.error('‚ùå Erreur clearAllData :', e);
  }
};

export const saveProductDataToCache = async (data) => {
    try {
      const key = '@snapshot_product_cache';
      const jsonValue = JSON.stringify(data);
      await AsyncStorage.setItem(key, jsonValue);
      console.log('‚úÖ Donn√©es produit sauvegard√©es en cache :', jsonValue);
    } catch (e) {
      console.error(`‚ùå Erreur sauvegarde ${JSON.stringify(data)} :`, e);
    }
  };
  

  export const loadProductDataFromCache = async () => {
    try {
      const key = '@snapshot_product_cache';
      const jsonValue = await AsyncStorage.getItem(key);
      if (jsonValue !== null) {
        console.log('üì¶ Donn√©es produit charg√©es depuis le cache');
        return JSON.parse(jsonValue);
      } else {
        return null;
      }
    } catch (e) {
      console.error('‚ùå Erreur chargement cache produit :', e);
      return null;
    }
  };


  export const removeProductDataFromCache = async () => {
    try {
      await AsyncStorage.removeItem('@snapshot_product_cache');
      console.log('üßπ Cache produit supprim√©');
    } catch (e) {
      console.error('‚ùå Erreur suppression cache produit :', e);
    }
  };
  
  